Ext.data.JsonP.Ext_ComponentQuery({"tagname":"class","name":"Ext.ComponentQuery","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":true,"requires":[],"uses":[],"enum":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-Ext.ComponentQuery","members":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"linenr":5700,"files":[{"filename":"sencha-touch-debug-w-comments.js","href":"sencha-touch-debug-w-comments.html#Ext-ComponentQuery"}],"html_meta":{},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/sencha-touch-debug-w-comments.html#Ext-ComponentQuery' target='_blank'>sencha-touch-debug-w-comments.js</a></div></pre><div class='doc-contents'><p>Provides searching of Components within <a href=\"#!/api/Ext.ComponentMgr\" rel=\"Ext.ComponentMgr\" class=\"docClass\">Ext.ComponentMgr</a> (globally) or a specific\n<a href=\"#!/api/Ext.Container\" rel=\"Ext.Container\" class=\"docClass\">Ext.Container</a> on the document with a similar syntax to a CSS selector.</p>\n\n<p>Xtypes can be retrieved by their name with an optional . prefix</p>\n\n<ul>\n    <li>component or .component</li>\n    <li>gridpanel or .gridpanel</li>\n</ul>\n\n\n<p>An itemId or id must be prefixed with a #.</p>\n\n<ul>\n    <li>#myContainer</li>\n</ul>\n\n\n<p>Attributes must be wrapped in brackets</p>\n\n<ul>\n    <li>component[autoScroll]</li>\n    <li>panel[title=\"Test\"]</li>\n</ul>\n\n\n<p>Member expressions from candidate Components may be tested. If the expression returns a <i>truthy</i> value,\nthe candidate Component will be included in the query:</p>\n\n<pre><code>var disabledFields = myFormPanel.query(\"{isDisabled()}\");\n</code></pre>\n\n\n<p>Pseudo classes may be used to filter results in the same way as in <a href=\"#!/api/Ext.DomQuery\" rel=\"Ext.DomQuery\" class=\"docClass\">DomQuery</a>:<code></p>\n\n<pre>// Function receives array and returns a filtered array.\nExt.ComponentQuery.pseudos.invalid = function(items) {\n    var i = 0, l = items.length, c, result = [];\n    for (; i < l; i++) {\n        if (!(c = items[i]).isValid()) {\n            result.push(c);\n        }\n    }\n    return result;\n};\n\nvar invalidFields = myFormPanel.query('field:invalid');\nif (invalidFields.length) {\n    invalidFields[0].getEl().scrollIntoView(myFormPanel.body);\n    for (var i = 0, l = invalidFields.length; i < l; i++) {\n        invalidFields[i].getEl().frame(\"red\");\n    }\n}\n</pre>\n\n\n<p></code></p>\n\n<p>Queries return an array of components.\nHere are some example queries.</p>\n\n<pre><code>    // retrieve all <a href=\"#!/api/Ext.Panel\" rel=\"Ext.Panel\" class=\"docClass\">Ext.Panel</a>'s on the document by xtype\n    var panelsArray = Ext.ComponentQuery.query('.panel');\n\n    // retrieve all Ext.Panels within the container with an id myCt\n    var panelsWithinmyCt = Ext.ComponentQuery.query('#myCt .panel');\n\n    // retrieve all direct children which are Ext.Panels within myCt\n    var directChildPanel = Ext.ComponentQuery.query('#myCt > .panel');\n\n    // retrieve all gridpanels and listviews\n    var gridsAndLists = Ext.ComponentQuery.query('gridpanel, listview');\n</code></pre>\n\n</div><div class='members'></div></div>"});